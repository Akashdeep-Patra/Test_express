import NarcList from "./NarcList";
// a custom class to handle all the encryption methodology for a greater level of abstraction
class Encryption {
  constructor() {
    //key set to a default value of 0
    this.key = 0;
    this.NarcList = NarcList;
  }
  getIndex = (char) => {
    return char.charCodeAt(0) - "A".charCodeAt(0);
  };
  //get the postion index at the alphabetic order
  getNarcNum = (str) => {
    //get the list of narcicistic numbers generated by each alphabet
    str = str.replace(/ /g, "");
    str = str.split("");
    str = str.map((c) => this.NarcList[this.getIndex(c) + this.key]);

    return str.join("").split("");
  };
  //function to implement the encryption logic
  encrypt = (str) => {
    const arr = this.getNarcNum(str);
    let i = 0;
    let convertedarray = [];
    while (i < arr.length) {
      if (arr[i] === "0") {
        convertedarray.push(arr[i]);
        i += 1;
      } else if (i === arr.length - 1) {
        convertedarray.push(arr[i]);
        i += 1;
        break;
      } else if (arr[i] + arr[i + 1] <= "25") {
        convertedarray.push(arr[i] + arr[i + 1]);
        i += 2;
      } else {
        convertedarray.push(arr[i]);
        i += 1;
      }
    }
    convertedarray = convertedarray.map((n) => parseInt(n));
    convertedarray = convertedarray.map((n) => String.fromCharCode(n + 65));
    return convertedarray.join("") + "." + this.key.toString();
    //return convertedarray;
  };
}

//var e = new Encryption();
//console.log(e.NarcList.length);
//console.log(e.getIndex("Z"), e.key);
export default Encryption;
//console.log(e.NarcList[25]);
